// Altere o tipo das variÃ¡veis(var) para let ou const para que respeitem o escopo em que foram declaradas, e altere a funÃ§Ã£o utilizando arrow function e template literals.

// Modifique a estrutura da funÃ§Ã£o para que ela seja uma arrow function;
// Modifique as variÃ¡veis para que respeitem o escopo onde estÃ£o declaradas;
// Modifique as concatenaÃ§Ãµes para template literals.

function testingScope(escopo) {
  if (escopo === true) {
    var ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' Ã³timo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    var elseScope = 'NÃ£o devo ser utilizada fora do meu escopo (else)';
    console.log(elseScope);
  }
  console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necessÃ¡rio esta linha pode ser removida.
}

testingScope(true);

// Primeiro passo: Modifique a estrutura da funÃ§Ã£o para que ela seja uma arrow function.

const testingScope = (escopo) => { // Alterando estrutura para utilizar arrow function
  if (escopo === true) {
    var ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' Ã³timo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    var elseScope = 'NÃ£o devo ser utilizada fora do meu escopo (else)';
    console.log(elseScope);
  }
  console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necessÃ¡rio esta linha pode ser removida.
};

testingScope(true);

// Segundo passo: Altere as concatenaÃ§Ãµes para template literals.

const testingScope = escopo => {
  if (escopo === true) { 
    var ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} Ã³timo, fui utilizada no escopo!`; // SubstituiÃ§Ã£o das concatenaÃ§Ãµes de strings para template literals
    console.log(ifScope);
  } else {
    var elseScope = 'NÃ£o devo ser utilizada fora do meu escopo (else)';
    console.log(elseScope);
  }
  console.log(`${ifScope} o que estou fazendo aqui? :O`); // SubstituiÃ§Ã£o das concatenaÃ§Ãµes de strings para template literals
}

testingScope(true);

// Altere a variÃ¡vel do tipo var, ifScope para let e elseScope, para const.

// Dessa forma elas nÃ£o vazam o escopo do if e else.

const testingScope = (escopo) => { 
  if (escopo === true) {
    let ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)'; // Alterando o tipo da variÃ¡vel para const
    ifScope = ifScope + ' Ã³timo, fui utilizada no escopo!';
    console.log(ifScope);
  } else {
    const elseScope = 'NÃ£o devo ser utilizada fora do meu escopo (else)'; // Alterando o tipo da variÃ¡vel para const
    console.log(elseScope);
  }
  console.log(`${ifScope} o que estou fazendo aqui? :O`);
};

testingScope(true);

// Retire o console.log que estÃ¡ fora do if/else

// Agora que as variÃ¡veis ifScope e elseScope foram alteradas para respeitarem o escopo, vocÃª deve retirar o console.log que estÃ¡ fora do if/else para que seu cÃ³digo consiga ser executado sem nenhum erro, pois essas variÃ¡veis nÃ£o sÃ£o mais acessÃ­veis fora de seu escopo.

const testingScope = (escopo) => { 
  if (escopo === true) { 
    let ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} Ã³timo, fui utilizada no escopo!`;
    console.log(ifScope);
  } else {
    const elseScope = 'NÃ£o devo ser utilizada fora do meu escopo (else)';
    console.log(elseScope);
  }
}

testingScope(true);

// -------------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------------

// Crie uma funÃ§Ã£o que retorne um array em ordem crescente.

// const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// const sortOddsAndEvens = () => {

// // Seu cÃ³digo aqui.

// console.log(oddsAndEvens); // serÃ¡ necessÃ¡rio alterar essa linha ðŸ˜‰

// Primeiro passo: Reatribua os valores de cada posiÃ§Ã£o do array oddsAndEvens, fazendo com que os nÃºmeros fiquem ordenados de forma crescente.

  const oddsAndEvens = [13, 3, 4, 10, 7, 2];
  const sortOddsAndEvens = () => { // FunÃ§Ã£o criada para ordenar os valores do array oddsAndEvens de forma crescente
    oddsAndEvens[0] = 2;
    oddsAndEvens[1] = 3;
    oddsAndEvens[2] = 4;
    oddsAndEvens[3] = 7;
    oddsAndEvens[4] = 10;
    oddsAndEvens[5] = 13;
    return oddsAndEvens;
  };
  console.log(oddsAndEvens); // serÃ¡ necessÃ¡rio alterar essa linha ðŸ˜‰

// Segundo passo: Armazene o valor retornado pela funÃ§Ã£o sortOddsAndEvens em uma variÃ¡vel.

  const oddsAndEvens = [13, 3, 4, 10, 7, 2];
  const sortOddsAndEvens = () => {
    oddsAndEvens[0] = 2;
    oddsAndEvens[1] = 3;
    oddsAndEvens[2] = 4;
    oddsAndEvens[3] = 7;
    oddsAndEvens[4] = 10;
    oddsAndEvens[5] = 13;
    return oddsAndEvens;
  };
  const sortedArray = sortOddsAndEvens(); // Armazenando o valor retornado pela funÃ§Ã£o em uma variÃ¡vel
  console.log(oddsAndEvens); // serÃ¡ necessÃ¡rio alterar essa linha ðŸ˜‰

// Terceiro passo: Agora vocÃª deve utilizar template literals para exibir a mensagem desejada.

  const oddsAndEvens = [13, 3, 4, 10, 7, 2];
  const sortOddsAndEvens = () => {
    oddsAndEvens[0] = 2;
    oddsAndEvens[1] = 3;
    oddsAndEvens[2] = 4;
    oddsAndEvens[3] = 7; 
    oddsAndEvens[4] = 10;
    oddsAndEvens[5] = 13;
    return oddsAndEvens;
  };
  const sortedArray = sortOddsAndEvens();
  console.log(`Os nÃºmeros ${sortedArray} se encontram ordenados de forma crescente!`); // Utilizando template literals para exibir a mensagem desejada

// BÃ´nus array.sort()

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const sortArrayBonus = (array) => {
  const sortOddsAndEvens = array.sort((a, b) => a - b);
  return sortOddsAndEvens;
};

const sortedArrayBonus = sortArrayBonus(oddsAndEvens);
console.log(`Os nÃºmeros ${sortedArrayBonus} se encontram ordenados de forma crescente!`);
array.sort com sort em uma linha.
Copiar
const oddsAndEvens = [13, 3, 4, 10, 7, 2];

console.log(`Os nÃºmeros ${oddsAndEvens.sort((a, b) => a - b)} se encontram ordenados de forma crescente!`);




